import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.model.testsuite.TestRunner
import javax.swing.JOptionPane
import java.io.FileWriter
import java.io.IOException

//-----------------------------------------------------------------------------------------------

// Prompt for password
def password = JOptionPane.showInputDialog(null, "Enter password:", "Password", JOptionPane.QUESTION_MESSAGE)

// Check if password is correct
if (password == "getRequest") {
    // Password is correct
    log.info("Password is correct. Running the code...")
    
} else {
    // Password is incorrect
    log.error("Incorrect password. Code execution aborted.")
    
    // You can choose to throw an exception or exit the script here
    throw new Exception("Incorrect password. Code execution aborted.")
}

//-----------------------------------------------------------------------------------------------

// Specify the file path
def filePath = "C:/Users/ethanr3/Desktop/InactiveUsers.csv"

// Read the CSV file
def csvFile = new File(filePath)

// Get the TestRunner object
def testRunner = context.testRunner as TestRunner

// Create a List to store distinct IDs
List<String> requestIDs = []
csvFile.withReader { reader ->
    def lineCount = 0
    reader.eachLine { line ->
        if (lineCount > 0) {
            def columns = line.split(",") 
            if (columns.length >= 10) { 
                def parentID = columns[9].trim()
                if (!requestIDs.contains(parentID)) {
                    requestIDs.add(parentID)
                }
            }
        }
        lineCount++
    }
}

//-----------------------------------------------------------------------------------------------

// Create Lists to store the results
List<String> parentIDs = []
List<String> statuses = []
List<String> jobNames = []

// Get the "getRequestState" test step and context
def getRequestDetailTest = testRunner.testCase.testSteps["getRequestDetail"]
def contextGetRequestDetailTest = new WsdlTestRunContext(getRequestDetailTest)

// Iterate over the request IDs
requestIDs.each { parentID ->
    def xmlReq = testRunner.testCase.testSteps["getRequestDetail"].getPropertyValue("Request")
    def samplexmlreq = new XmlHolder(xmlReq)
  
    samplexmlreq.setNodeValue("//sch:getRequestDetail/sch:requestId", parentID.toString())

    def finalXml = samplexmlreq.getXml()
    testRunner.testCase.testSteps["getRequestDetail"].setPropertyValue("Request", finalXml)

    // Run the request and capture the response
    def response = getRequestDetailTest.run(testRunner, contextGetRequestDetailTest)

    // Get the response XML
    def responseXml = response.getResponseContent()

    // Set up the xmlHolder
    def xmlHolder = new XmlHolder(responseXml)

    // Extract the status from the response XML
    def status = xmlHolder.getNodeValue("//*:state")

    

    // Extract the jobName from the response XML
    def jobName = xmlHolder.getNodeValue("//*:name")

    // Add the results to the Lists
    parentIDs.add(parentID)
    statuses.add(status)
    jobNames.add(jobName)

    // Log the current iteration results
    log.info("Parent ID: $parentID | Status: $status | Job Name: $jobName")

}

//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
def writeResultsToTextFile(List<String> parentIDs, List<String> jobNames, List<String> statuses) {
    def textFilePath = "C:/Users/ethanr3/Desktop/Results.txt"
    def fileWriter = new FileWriter(textFilePath)

    try {
        parentIDs.eachWithIndex { parentID, index ->
            def status = statuses[index]
            def jobName = jobNames[index]
            fileWriter.write("Parent ID: $parentID, Job Name: $jobName Status: $status\n")
        }
    } finally {
        fileWriter.close()
    }

    log.info("Results written to: $textFilePath")
}

// Write the results to the text file
writeResultsToTextFile(parentIDs, jobNames, statuses)


